// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Users {
    use_id          String        @id @default(uuid())
    use_name        String
    use_logs_change Logs_Change[]
    created_at      DateTime?     @default(now())
    updated_at      DateTime?     @default(now())

    @@map("users")
}

model Books {

    boo_id                String        @id @default(uuid())
    boo_code              String        @unique
    boo_title             String        @unique
    boo_year              Int
    boo_status            String
    boo_justify_status    String
    boo_category_change   String
    boo_bar_code          String
    boo_price_acquisition Float
    boo_edition           String
    boo_publisher         String
    boo_ISBN              String        @unique
    boo_pages             Int
    boo_synopsis          String
    boo_width             Float
    boo_height            Float
    boo_weight            Float
    boo_depth             Float
    boo_group_pricing     Group_Pricing @relation(fields: [fk_boo_grp_id], references: [grp_id])
    boo_logChange         Logs_Change[]
    fk_boo_grp_id         String
    fk_boo_aut_id         Authors[]
    fk_boo_cte_id         Categories[]
    created_at            DateTime?     @default(now())
    updated_at            DateTime?     @default(now())

    @@map("books")
}

model Authors {
    aut_id     String    @id @default(uuid())
    aut_name   String    @unique
    aut_book   Books[]
    created_at DateTime? @default(now())
    updated_at DateTime? @default(now())

    @@map("authors")
}

model Categories {
    cte_id     String    @id @default(uuid())
    cte_name   String    @unique
    cte_book   Books[]
    created_at DateTime? @default(now())
    updated_at DateTime? @default(now())

    @@map("categories")
}

model Logs_Change {
    log_id        String    @id @default(uuid())
    log_type      String
    log_boo_id    Books     @relation(fields: [fk_log_boo_id], references: [boo_id])
    log_use_id    Users     @relation(fields: [fk_log_use_id], references: [use_id])
    fk_log_boo_id String
    fk_log_use_id String
    created_at    DateTime? @default(now())
    updated_at    DateTime? @default(now())

    @@map("logsChanged")
}

model Group_Pricing {
    grp_id      String    @id @default(uuid())
    grp_type    String
    grp_percent Float
    grp_book    Books[]
    created_at  DateTime? @default(now())
    updated_at  DateTime? @default(now())

    @@map("groupPricing")
}
