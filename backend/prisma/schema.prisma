// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Client {
    cli_id              String       @id @default(uuid()) // Código único de cliente
    cli_name            String // Nome
    cli_dateOfBirth     DateTime // Data de nascimento
    cli_cpf             String       @unique // CPF (único)
    cli_status          String // Status (ativo/inativo)
    cli_gender          String // Gênero
    cli_email           String       @unique // Email
    cli_phone           Phone[] // Relação 1:N com telefones
    cli_score           Float // Pontuação do cliente baseada no perfil de compra
    cli_profilePurchase String // Perfil de compra
    created_at          DateTime     @default(now())
    updated_at          DateTime     @default(now())
    cli_address         Address[] // Relação 1:N com endereços
    cli_ranking         Ranking?
    fk_cli_ran_id       String       @unique
    cli_creditCards     CreditCart[] // Relação 1:N com cartões de crédito
}

model Phone {
    pho_id         String @id @default(uuid())
    pho_ddd        String @db.VarChar(3) // DDD do telefone
    pho_number     String // Número do telefone
    pho_type_phone String // Tipo (celular, fixo, etc.)
    pho_client     Client @relation(fields: [fk_pho_cli_id], references: [cli_id])
    fk_pho_cli_id  String
}

model Address {
    add_id            String  @id @default(uuid())
    add_streetName    String // Nome da rua
    add_publicPlace   String // Logradouro
    add_number        String // Número
    add_cep           String // CEP
    add_neighborhood  String // Bairro
    add_compostName   String? // Complemento
    add_typeResidence String // Tipo de residência (Casa, Apartamento, etc.)
    add_city          String // Cidade
    add_state         String // Estado
    add_country       String // País
    add_isBilling     Boolean // Se é endereço de cobrança (RN0021)
    add_isDelivery    Boolean // Se é endereço de entrega (RN0022)
    add_client        Client  @relation(fields: [fk_add_cli_id], references: [cli_id])
    fk_add_cli_id     String
}

model CreditCart {
    cre_id           String  @id @default(uuid())
    cre_name         String // Nome no cartão
    cre_number_cart  String // Número do cartão
    cre_cvv          String  @db.VarChar(3) // Código de segurança
    cre_dateMaturity String // Data de validade
    cre_preference   Boolean // Preferencial (RF0027)
    cre_Flag         Flag    @relation(fields: [fk_cre_fla_id], references: [fla_id])
    fk_cre_fla_id    String
    cre_client       Client  @relation(fields: [fk_cre_cli_id], references: [cli_id])
    fk_cre_cli_id    String
}

model Flag {
    fla_id          String       @id @default(uuid())
    fla_name        String // Nome da bandeira (Visa, Mastercard, etc.)
    fla_creditCarts CreditCart[] // Relação 1:N com cartões de crédito
}

model Ranking {
    ran_id        String @id @default(uuid())
    ran_value     Int // Valor numérico do ranking (RN0027)
    ran_client    Client @relation(fields: [fk_ran_cli_id], references: [cli_id])
    fk_ran_cli_id String @unique
}

model User {
    use_id     String   @id @default(uuid())
    use_name   String
    created_at DateTime @default(now())
    updated_at DateTime @default(now())
    Log        Log[]
}

model Log {
    log_id     String   @id @default(uuid())
    log_use    User     @relation(fields: [fk_log_use_id], references: [use_id])
    created_at DateTime @default(now())
    updateD_at DateTime @default(now())
    fk_log_use_id String
}
