// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    use_id          String       @id @default(uuid())
    use_name        String
    use_logs_change LogsChange[]
    created_at      DateTime?    @default(now())
    updated_at      DateTime?    @default(now())

    @@map("users")
}

model Book {
    boo_id                String            @id @default(uuid())
    boo_code              String            @unique
    boo_title             String
    boo_year              Int
    boo_status            String
    boo_justify_status    String
    boo_category_change   String
    boo_bar_code          String
    boo_price_acquisition Float
    boo_cost_product      Float
    boo_edition           String
    boo_ISBN              String            @unique
    boo_pages             Int
    boo_synopsis          String
    boo_width             Float
    boo_height            Float
    boo_weight            Float
    boo_depth             Float
    boo_grp_id            GroupPricing      @relation(fields: [fk_boo_grp_id], references: [grp_id])
    boo_aut_id            Author            @relation(fields: [fk_boo_aut_id], references: [aut_id])
    boo_pub_id            Publisher         @relation(fields: [fk_boo_pub_id], references: [pub_id])
    boo_bookPercategory   BookPerCategory[]
    boo_logChange         LogsChange[]
    boo_bookPerAuthor     BookPerAuthor[]
    fk_boo_grp_id         String
    fk_boo_aut_id         String
    fk_boo_pub_id         String

    @@map("books")
}

model Author {
    aut_id            String          @id @default(uuid())
    aut_name          String
    aut_book          Book[]
    aut_bookPerAuthor BookPerAuthor[]
}

model Publisher {
    pub_id   String @id @default(uuid())
    pub_name String
    pub_book Book[]
}

model BookPerCategory {
    bpe_id        String   @id @default(uuid())
    bpe_boo_id    Book     @relation(fields: [fk_bpe_boo_id], references: [boo_id])
    bpe_cte_id    Category @relation(fields: [fk_bpe_cte_id], references: [cte_id])
    fk_bpe_boo_id String
    fk_bpe_cte_id String
}

model BookPerAuthor {
    bpa_id        String @id @default(uuid())
    bpa_boo_id    Book   @relation(fields: [fk_bpa_boo_id], references: [boo_id])
    bpa_aut_id    Author @relation(fields: [fk_bpa_aut_id], references: [aut_id])
    fk_bpa_boo_id String
    fk_bpa_aut_id String
}

model Category {
    cte_id              String            @id @default(uuid())
    cte_name            String            @unique
    cte_bookPerCategory BookPerCategory[]

    @@map("categories")
}

model GroupPricing {
    grp_id           String @id @default(uuid())
    grp_type_pricing String @unique
    grp_book         Book[]

    @@map("groups")
}

model LogsChange {
    log_id          String    @id @default(uuid())
    log_boo_code    Book      @relation(fields: [fk_log_boo_code], references: [boo_id])
    log_use_id      User      @relation(fields: [fk_log_use_id], references: [use_id])
    created_at      DateTime? @default(now())
    updated_at      DateTime? @default(now())
    fk_log_boo_code String
    fk_log_use_id   String

    @@map("logsChanged")
}
