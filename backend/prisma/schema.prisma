// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

model User {
    use_id       String      @id @default(uuid())
    use_email    String      @unique
    use_is_admin Boolean
    use_password String
    use_log      ChangeLog[]
}

model Client {
    cli_id              String       @id @default(uuid()) // Código único de cliente
    cli_name            String // Nome
    cli_dateOfBirth     String // Data de nascimento
    cli_cpf             String       @unique // CPF (único)
    cli_status          String // Status (ativo/inativo)
    cli_gender          String // Gênero
    cli_password        String
    cli_email           String       @unique // Email
    cli_phone           Phone[] // Relação 1:N com telefones
    cli_score           Float // Pontuação do cliente baseada no perfil de compra
    cli_profilePurchase String // Perfil de compra
    cli_address         Address[] // Relação 1:N com endereços
    cli_ranking         Int
    cli_creditCards     CreditCard[] // Relação 1:N com cartões de crédito
    cli_sales           Sale[]
    created_at          DateTime     @default(now())
    updated_at          DateTime     @updatedAt
}

model Phone {
    pho_id            String   @id @default(uuid())
    pho_ddd           String   @db.VarChar(3) // DDD do telefone
    pho_number        String // Número do telefone
    pho_numberCombine String   @unique
    pho_type_phone    String // Tipo (celular, fixo, etc.)
    pho_client        Client   @relation(fields: [fk_pho_cli_id], references: [cli_id])
    fk_pho_cli_id     String
    created_at        DateTime @default(now())
    updated_at        DateTime @updatedAt
}

model Address {
    add_id            String   @id @default(uuid())
    add_name          String   @unique
    add_streetName    String // Nome da rua
    add_publicPlace   String // Logradouro
    add_number        String // Número
    add_cep           String // CEP
    add_neighborhood  String // Bairro
    add_compostName   String? // Complemento
    add_typeResidence String // Tipo de residência (Casa, Apartamento, etc.)
    add_city          String
    add_state         String
    add_isBilling     Boolean // Se é endereço de cobrança (RN0021)
    add_isDelivery    Boolean // Se é endereço de entrega (RN0022)
    add_client        Client   @relation(fields: [fk_add_cli_id], references: [cli_id])
    fk_add_cli_id     String
    created_at        DateTime @default(now())
    updated_at        DateTime @updatedAt

    @@unique([add_cep, add_name, add_number, add_streetName])
}

model CreditCard {
    cre_id           String   @id @default(uuid())
    cre_name         String // Nome no cartão
    cre_number_cart  String // Número do cartão
    cre_cvv          String   @db.VarChar(3) // Código de segurança
    cre_dateMaturity String // Data de validade
    cre_preference   Boolean // Preferencial (RF0027)
    cre_flag         String
    cre_client       Client?  @relation(fields: [fk_cre_cli_id], references: [cli_id])
    fk_cre_cli_id    String
    created_at       DateTime @default(now())
    updated_at       DateTime @updatedAt

    @@unique([cre_number_cart, cre_cvv, cre_name])
}

model ChangeLog {
    log_id          String   @id @default(uuid())
    log_action      String // Descrição da ação (inserção, atualização, etc.)
    log_user        User     @relation(fields: [fk_log_use_id], references: [use_id])
    log_table       String
    log_description String
    created_at      DateTime @default(now())
    updated_at      DateTime @updatedAt
    fk_log_use_id   String
}

model Book {
    boo_id            String       @id @default(uuid())
    boo_title         String
    boo_year          String
    boo_edition       String
    boo_isbn          String
    boo_page_numbers  Int
    boo_synopses      String
    boo_height        Float
    boo_width         Float
    boo_weight        Float
    boo_depth         Float
    boo_author        Author[]
    boo_categories    Categories[]
    boo_publisher     Publisher[]
    boo_pricing_Group PricingGroup @relation(fields: [fk_boo_pre_id], references: [pre_id])
    boo_item_stock    ItemStock?
    fk_boo_pre_id     String       @unique
    created_at        DateTime     @default(now())
    updated_at        DateTime     @updatedAt
}

model PricingGroup {
    pre_id     String   @id @default(uuid())
    pre_type   String
    Book       Book[]
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model Publisher {
    pub_id     String   @id @default(uuid())
    pub_name   String   @unique
    pub_book   Book[]
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model Categories {
    cte_id     String   @id @default(uuid())
    cte_name   String   @unique
    cte_book   Book[]
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model Author {
    aut_id     String   @id @default(uuid())
    aut_name   String   @unique
    aut_book   Book[]
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model ItemStock {
    ito_id         String      @id @default(uuid())
    ito_book       Book        @relation(fields: [fk_ito_boo_id], references: [boo_id])
    ito_quantity   Int
    fk_ito_boo_id  String      @unique
    ito_item_order ItemOrder[]
}

model ItemOrder {
    ite_id            String      @id @default(uuid())
    ite_quantity      Int // Quantidade de itens
    ite_product_price Float
    ite_book          ItemStock[]
    ite_cart          Cart        @relation(fields: [fk_ite_crt_id], references: [crt_id])
    ite_coupon        Coupons?
    ite_exchange      Exchange?
    fk_ite_boo_id     String
    fk_ite_sal_id     String
    fk_ite_crt_id     String
    created_at        DateTime    @default(now())
    updated_at        DateTime    @updatedAt
}

model Cart {
    crt_id        String      @id @default(uuid())
    crt_items     ItemOrder[]
    crt_sale      Sale?
    fk_crt_sal_id String      @unique
    created_at    DateTime    @default(now())
    updated_at    DateTime    @updatedAt
}

model Payment {
    pay_id     String   @id @default(uuid())
    pay_method String
    pay_sal    Sale[]
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model Coupons {
    cou_id          String    @id @default(uuid())
    cou_code        String    @unique // Código do cupom
    cou_type        String // "PROMOCIONAL" ou "TROCA"
    cou_discount    Float // Valor do desconto (pode ser fixo ou percentual)
    cou_is_percent  Boolean // Indica se o desconto é percentual (%)
    cou_valid_until DateTime // Data de expiração do cupom
    cou_min_value   Float? // Valor mínimo para o cupom ser aplicado
    cou_status      String // "ATIVO", "USADO", "EXPIRADO"
    cou_item        ItemOrder @relation(fields: [fk_cou_ite_id], references: [ite_id])
    fk_cou_ite_id   String    @unique
    created_at      DateTime  @default(now())
    updated_at      DateTime  @updatedAt
}

model Exchange {
    exc_id        String    @id @default(uuid())
    exc_date      DateTime  @default(now())
    exc_status    String // "PENDENTE", "APROVADA", "RECUSADA"
    exc_value     Float // Valor do crédito gerado
    exc_item      ItemOrder @relation(fields: [fk_exc_ite_id], references: [ite_id])
    fk_exc_ite_id String    @unique
    fk_exc_sal_id String
    fk_exc_cou_id String?
}

model Sale {
    sal_id          String    @id @default(uuid())
    sal_date_sale   DateTime
    sal_date_update DateTime
    sal_status      String // Vai validar o status do processamento do cartão de crédito, caso aprovado o status muda de: EM PROCESSAMENTO para APROVADO
    sal_client      Client    @relation(fields: [fk_sal_cli_id], references: [cli_id])
    sal_cart        Cart      @relation(fields: [fk_sal_crt_id], references: [crt_id])
    sal_delivery    Delivery? // Alterado para opcional
    sal_payment     Payment[]
    fk_sal_cou_id   String
    fk_sal_pay_id   String    @unique
    fk_sal_cli_id   String
    fk_sal_crt_id   String    @unique
    created_at      DateTime  @default(now())
    updated_at      DateTime  @updatedAt
}

model Delivery {
    del_id           String   @id @default(uuid())
    del_status       String
    del_sale         Sale     @relation(fields: [fk_del_sal_id], references: [sal_id]) // Alterado para ter uma relação direta com Sale
    fk_del_sal_id    String   @unique // Chave estrangeira que referencia a tabela Sale
    del_date_initial DateTime
    del_date_final   DateTime
}
