// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    use_id          String       @id @default(uuid())
    use_name        String
    use_logs_change LogsChange[]
    created_at      DateTime?    @default(now())
    updated_at      DateTime?    @default(now())

    @@map("users")
}

model Book {
    boo_code              String       @id @default(uuid())
    boo_title             String
    boo_year              Int
    boo_status            String
    boo_justify_status    String
    boo_category_change   String
    boo_bar_code          String
    boo_price_acquisition Float
    boo_edition           String
    boo_ISBN              String       @unique
    boo_pages             Int
    boo_synopsis          String
    boo_width             Float
    boo_height            Float
    boo_weight            Float
    boo_depth             Float
    boo_aut_id            Author @relation(fields: [fk_boo_author_id], references: [aut_id])
    boo_pub_id            Publisher @relation(fields: [fk_boo_pub_id], references: [pub_id])
    boo_grp_id            GroupPricing @relation(fields: [fk_boo_grp_id], references: [grp_id])
    boo_stock             Stock[]
    boo_logs_change       LogsChange[]
    fk_boo_author_id      String
    fk_boo_pub_id         String
    fk_boo_grp_id         String

    @@map("books")
}

model Author {
    aut_id     String    @id @default(uuid())
    aut_name   String
    aut_book   Book[]
    created_at DateTime? @default(now())
    updated_at DateTime? @default(now())

    @@map("authors")
}

model Publisher {
    pub_id     String    @id @default(uuid())
    pub_name   String    @unique
    pub_book   Book[]
    created_at DateTime? @default(now())
    updated_at DateTime? @default(now())

    @@map("publishers")
}

model Category {
    cte_id   String @id @default(uuid())
    cte_name String @unique

    @@map("categories")
}

model Sales {
    sal_id         String    @id @default(uuid())
    sal_quantity   Int
    sal_price_sale Float
    sal_stk_id     Stock     @relation(fields: [fk_sal_stk_id], references: [stk_id])
    fk_sal_stk_id  String
    created_at     DateTime? @default(now())
    updated_at     DateTime? @default(now())

    @@map("sales")
}

model GroupPricing {
    grp_id           String    @id @default(uuid())
    grp_type_pricing String    @unique
    grp_max_pricing  Float
    grp_min_pricing  Float
    grp_book         Book[]
    created_at       DateTime? @default(now())
    updated_at       DateTime? @default(now())

    @@map("groups")
}

model LogsChange {
    log_id          String @id @default(uuid())
    log_boo_code    Book    @relation(fields: [fk_log_boo_code], references: [boo_code])
    log_use_id      User    @relation(fields: [fk_log_use_id], references: [use_id])
    fk_log_boo_code String
    fk_log_use_id   String

    created_at DateTime? @default(now())
    updated_at DateTime? @default(now())

    @@map("logsChanged")
}

model Stock {
    stk_id        String  @id @default(uuid())
    stk_quantity  Int
    stk_boo_id    Book @relation(fields: [fk_stk_boo_id], references: [boo_code])
    stk_sal       Sales[]
    fk_stk_boo_id String
    salesSal_id   String
}
